/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.student;

import info5100.university.example.CourseCatalog.Course;
import info5100.university.example.CourseSchedule.CourseLoad;
import info5100.university.example.CourseSchedule.CourseOffer;
import info5100.university.example.CourseSchedule.CourseSchedule;
import info5100.university.example.Department.Department;
import info5100.university.example.Persona.StudentProfile;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ui.MainJframe;

/**
 *
 * @author Yufeng
 */
public class CourseAssignment extends javax.swing.JPanel {

    /**
     * Creates new form CourseAssignment
     */
    MainJframe main;
    boolean initTable = true;
    Department department;
    CourseSchedule courseSchedule;
    StudentProfile student;
    
    public CourseAssignment(Department d, MainJframe m, CourseSchedule c, StudentProfile student) {
        initComponents();
        department = d;
        main = m;
        courseSchedule = c;
        this.student = student;
        populateSemester();
        populateStudentCourses();
        
        
    }
    public void populateSemester(){
        cmbSemester.removeAllItems();
        cmbSemester.addItem("Spring");
        cmbSemester.addItem("Summer");
        cmbSemester.addItem("Fall");
    }
    public void initTable(){
        DefaultTableModel model = (DefaultTableModel) tblAllCourse.getModel();
        model.setRowCount(0);
        for(CourseOffer co : department.getSpring().getSchedule()){
                Object row[] = new Object[5];
                row[0] = co;
                row[1] = co.getCourse().getName();
                row[2] = co.getFacultyProfile().getPerson().getName();
                row[3] = co.getCourse().getCredits();
                row[4] = co.getEmptySeatNumber() + " / " + co.getSeatlist().size();
                
                model.addRow(row);
            }
    }
    public void populateTable(){
        String semester = cmbSemester.getSelectedItem().toString();
        DefaultTableModel model = (DefaultTableModel) tblAllCourse.getModel();
        model.setRowCount(0);
        
        if(semester.equals("Spring")){
            for(CourseOffer co : department.getSpring().getSchedule()){
                Object row[] = new Object[5];
                row[0] = co;
                row[1] = co.getCourse().getName();
                row[2] = co.getFacultyProfile().getPerson().getName();
                row[3] = co.getCourse().getCredits();
                row[4] = co.getEmptySeatNumber() + " / " + co.getSeatlist().size();
                model.addRow(row);
            }
        }else if(semester.equals("Summer")){
            for(CourseOffer co : department.getSummer().getSchedule()){
                Object row[] = new Object[5];
                row[0] = co;
                row[1] = co.getCourse().getName();
                row[2] = co.getFacultyProfile().getPerson().getName();
                row[3] = co.getCourse().getCredits();
                row[4] = co.getEmptySeatNumber() + " / " + co.getSeatlist().size();
                model.addRow(row);
            }
        }else if(semester.equals("Fall")){
            for(CourseOffer co : department.getFall().getSchedule()){
               Object row[] = new Object[5];
                row[0] = co;
                row[1] = co.getCourse().getName();
                row[2] = co.getFacultyProfile().getPerson().getName();
                row[3] = co.getCourse().getCredits();
                row[4] = co.getEmptySeatNumber() + " / " + co.getSeatlist().size();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        cmbSemester = new javax.swing.JComboBox<>();
        lblSemester = new javax.swing.JLabel();
        Save = new javax.swing.JButton();
        btmBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAllCourse = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        studentCourseTbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(153, 204, 255));

        lblTitle.setFont(new java.awt.Font("宋体", 0, 14)); // NOI18N
        lblTitle.setText("Course Registration");

        cmbSemester.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSemester.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSemesterItemStateChanged(evt);
            }
        });
        cmbSemester.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSemesterActionPerformed(evt);
            }
        });

        lblSemester.setText("Semester:");

        Save.setBackground(new java.awt.Color(0, 153, 102));
        Save.setText("Enroll");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        btmBack.setBackground(new java.awt.Color(204, 51, 0));
        btmBack.setText("Back");
        btmBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btmBackActionPerformed(evt);
            }
        });

        tblAllCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Number", "Course Name", "Instructor", "Credit", "Space"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblAllCourse);
        if (tblAllCourse.getColumnModel().getColumnCount() > 0) {
            tblAllCourse.getColumnModel().getColumn(0).setResizable(false);
            tblAllCourse.getColumnModel().getColumn(1).setResizable(false);
            tblAllCourse.getColumnModel().getColumn(2).setResizable(false);
            tblAllCourse.getColumnModel().getColumn(3).setResizable(false);
            tblAllCourse.getColumnModel().getColumn(4).setResizable(false);
        }

        studentCourseTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Number", "Course Name", "Instructor", "Credit"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(studentCourseTbl);
        if (studentCourseTbl.getColumnModel().getColumnCount() > 0) {
            studentCourseTbl.getColumnModel().getColumn(0).setResizable(false);
            studentCourseTbl.getColumnModel().getColumn(1).setResizable(false);
            studentCourseTbl.getColumnModel().getColumn(2).setResizable(false);
            studentCourseTbl.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("Your Course:");

        jLabel2.setText("All Course");

        deleteBtn.setBackground(new java.awt.Color(153, 51, 0));
        deleteBtn.setText("Drop");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(btmBack)
                                .addGap(156, 156, 156)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTitle)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblSemester)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addComponent(Save)
                                .addGap(159, 159, 159)
                                .addComponent(deleteBtn)))
                        .addGap(0, 196, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3)
                    .addContainerGap()))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jLabel2)
                    .addContainerGap(615, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(btmBack))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSemester)
                            .addComponent(cmbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(45, 45, 45)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Save)
                    .addComponent(deleteBtn))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(315, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(50, 50, 50)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(107, 107, 107)
                    .addComponent(jLabel2)
                    .addContainerGap(386, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btmBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btmBackActionPerformed
        main.getCardLayout().previous(main.getCards());
        main.getCards().remove(main.smjp.cajp);
    }//GEN-LAST:event_btmBackActionPerformed

    private void cmbSemesterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSemesterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSemesterActionPerformed

    private void cmbSemesterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSemesterItemStateChanged
        // TODO add your handling code here:
        if(initTable == true){
            initTable();
            initTable = false;
        }else{
            populateTable();
            populateStudentCourses();
        }        
    
    }//GEN-LAST:event_cmbSemesterItemStateChanged

    
    public void populateStudentCourses(){
        
        String semester = cmbSemester.getSelectedItem().toString();
        DefaultTableModel model = (DefaultTableModel) studentCourseTbl.getModel();
        model.setRowCount(0);        
        if(semester.equals("Spring")){
            for(CourseLoad cl : student.getCourseLoadBySemester("Spring")){
                Object row[] = new Object[4];
                row[0] = cl;
                row[1] = cl.getCourseOffer().getCourse().getName();
                row[2] = cl.getCourseOffer().getFacultyProfile().getPerson().getName();
                row[3] = cl.getCourseOffer().getCourse().getCredits();
                model.addRow(row);
            }         
                
            
        }else if(semester.equals("Summer")){
            for(CourseLoad cl : student.getCourseLoadBySemester("Summer")){
                Object row[] = new Object[4];
                row[0] = cl;
                row[1] = cl.getCourseOffer().getCourse().getName();
                row[2] = cl.getCourseOffer().getFacultyProfile().getPerson().getName();
                row[3] = cl.getCourseOffer().getCourse().getCredits();
                model.addRow(row);
            }
        }else if(semester.equals("Fall")){
            for(CourseLoad cl : student.getCourseLoadBySemester("Fall")){
                Object row[] = new Object[4];
                row[0] = cl;
                row[1] = cl.getCourseOffer().getCourse().getName();
                row[2] = cl.getCourseOffer().getFacultyProfile().getPerson().getName();
                row[3] = cl.getCourseOffer().getCourse().getCredits();
                model.addRow(row);
            }
        }
    }
    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        String semester = cmbSemester.getSelectedItem().toString();
        if(semester.equals("Spring")){
            int coInt = tblAllCourse.getSelectedRow();
            if(coInt >= 0){
                CourseOffer courseOffer = (CourseOffer) tblAllCourse.getValueAt(coInt, 0);
                for(CourseLoad cl : student.getTranscript().getAllCourses()){
                    CourseOffer co = cl.getCourseOffer();
                    if(co.equals(courseOffer)){
                        JOptionPane.showMessageDialog(this, "You have already selected this course in Spring");
                        return;
                    }
                }
                if (courseOffer.assignEmptySeat(student, semester) == true){
                    JOptionPane.showMessageDialog(this, "Register Successful!");
                    populateTable();
                    populateStudentCourses();
                }else{
                    JOptionPane.showMessageDialog(this, "No more Space!");
                }
                
                
            }else{
                JOptionPane.showMessageDialog(this, "Please Select a Course");
            }
            
            
        }else if(semester.equals("Summer")){
            int coInt = tblAllCourse.getSelectedRow();
            if(coInt >= 0){
                CourseOffer courseOffer = (CourseOffer) tblAllCourse.getValueAt(coInt, 0);
                for(CourseLoad cl : student.getTranscript().getAllCourses()){
                    CourseOffer co = cl.getCourseOffer();
                    if(co.equals(courseOffer)){
                         JOptionPane.showMessageDialog(this, "You have already selected this course in Summer");
                        return;
                    }
                }                
                courseOffer.assignEmptySeat(student, semester);
                JOptionPane.showMessageDialog(this, "Register Successful!");
                populateTable();
                populateStudentCourses();
            }else{
                JOptionPane.showMessageDialog(this, "Please Select a Course");
            }
            
        }else if(semester.equals("Fall")){
            int coInt = tblAllCourse.getSelectedRow();
            if(coInt >= 0){
                CourseOffer courseOffer = (CourseOffer) tblAllCourse.getValueAt(coInt, 0);
                for(CourseLoad cl : student.getTranscript().getAllCourses()){
                    CourseOffer co = cl.getCourseOffer();
                    if(co.equals(courseOffer)){
                         JOptionPane.showMessageDialog(this, "You have already selected this course in Fall");
                        return;
                    }
                }                
                courseOffer.assignEmptySeat(student, semester);
                JOptionPane.showMessageDialog(this, "Register Successful!");
                populateTable();
                populateStudentCourses();
            }else{
                JOptionPane.showMessageDialog(this, "Please Select a Course");
            }
        }
        
        
    }//GEN-LAST:event_SaveActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        String semester = cmbSemester.getSelectedItem().toString();
        if(semester.equals("Spring")){
            int coInt = studentCourseTbl.getSelectedRow();
            if(coInt >= 0){
                CourseLoad courseLoad = (CourseLoad) studentCourseTbl.getValueAt(coInt, 0);
                CourseOffer courseOffer = courseLoad.getCourseOffer();
                courseOffer.dropCourse(courseLoad, student, semester);
                JOptionPane.showMessageDialog(this, "Drop Successful!");
                populateTable();
                populateStudentCourses();
                
            }else{
                JOptionPane.showMessageDialog(this, "Please Select a Course");
            }
            
            
        }else if(semester.equals("Summer")){
            int coInt = studentCourseTbl.getSelectedRow();
            if(coInt >= 0){
                CourseLoad courseLoad = (CourseLoad) studentCourseTbl.getValueAt(coInt, 0);
                CourseOffer courseOffer = courseLoad.getCourseOffer();
                courseOffer.dropCourse(courseLoad, student, semester);
                JOptionPane.showMessageDialog(this, "Drop Successful!");
                populateTable();
                populateStudentCourses();
                
            }else{
                JOptionPane.showMessageDialog(this, "Please Select a Course");
            }
            
        }else if(semester.equals("Fall")){
            int coInt = studentCourseTbl.getSelectedRow();
            if(coInt >= 0){
                CourseLoad courseLoad = (CourseLoad) studentCourseTbl.getValueAt(coInt, 0);
                CourseOffer courseOffer = courseLoad.getCourseOffer();
                courseOffer.dropCourse(courseLoad, student, semester);
                JOptionPane.showMessageDialog(this, "Drop Successful!");
                populateTable();
                populateStudentCourses();
                
            }else{
                JOptionPane.showMessageDialog(this, "Please Select a Course");
            }
        }
        
    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Save;
    private javax.swing.JButton btmBack;
    private javax.swing.JComboBox<String> cmbSemester;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable studentCourseTbl;
    private javax.swing.JTable tblAllCourse;
    // End of variables declaration//GEN-END:variables
}
